# handlers/callbacks.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
)
from sqlalchemy.orm import Session

from config import REVIEW_CHAT_ID
from database import SessionLocal
from models import Draft, ResponsiblePerson
from utils.formatter import format_text
from handlers.main_menu import main_menu_handler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def handle_post_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'save_draft':
        await save_draft(query, context)
    elif action == 'send_for_approval':
        await send_for_approval(query, context)
    elif action == 'edit_post':
        await edit_post(query, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=None)

async def save_draft(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    session: Session = SessionLocal()
    try:
        draft = Draft(
            user_id=query.from_user.id,
            title=context.user_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
            date=context.user_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            time_start=context.user_data.get('time_start', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            time_end=context.user_data.get('time_end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            place_name=context.user_data.get('place_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            place_url=context.user_data.get('place_url', ''),
            text=context.user_data.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'),
            contact=context.user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            image=context.user_data.get('image')
        )
        session.add(draft)
        session.commit()
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
        session.rollback()
    finally:
        session.close()

    await query.edit_message_caption(
        caption="–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.",
        parse_mode='MarkdownV2',
        reply_markup=None
    )
    await query.message.reply_text(
        "–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ])
    )
    context.user_data.clear()

async def send_for_approval(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    session: Session = SessionLocal()
    try:
        post_data = context.user_data

        post = (
            f"üì¢ *{post_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n\n"
            f"üìÖ *–î–∞—Ç–∞*: {post_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚è∞ *–í—Ä–µ–º—è*: {post_data.get('time_start', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {post_data.get('time_end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç *–ú–µ—Å—Ç–æ*: [{post_data.get('place_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}]({post_data.get('place_url', '')})\n\n"
            f"{post_data.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}\n\n"
            f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç*: {post_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

        if post_data.get('image'):
            await context.bot.send_photo(
                chat_id=REVIEW_CHAT_ID,
                photo=post_data['image'],
                caption=post,
                parse_mode='MarkdownV2'
            )
        else:
            await context.bot.send_message(
                chat_id=REVIEW_CHAT_ID,
                text=post,
                parse_mode='MarkdownV2'
            )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü
        responsible_persons = session.query(ResponsiblePerson).all()

        if responsible_persons:
            keyboard = [
                [InlineKeyboardButton(person.name, callback_data=f'responsible_{person.telegram_id}')]
                for person in responsible_persons
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=REVIEW_CHAT_ID,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç:",
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=REVIEW_CHAT_ID,
                text="–ù–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
            )
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")
        session.rollback()
    finally:
        session.close()

    await query.edit_message_caption(
        caption="–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.",
        parse_mode='MarkdownV2',
        reply_markup=None
    )
    await query.message.reply_text(
        "–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ])
    )
    context.user_data.clear()

async def edit_post(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    await query.edit_message_caption(
        caption="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data='edit_title')],
            [InlineKeyboardButton("–î–∞—Ç–∞", callback_data='edit_date')],
            [InlineKeyboardButton("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", callback_data='edit_time_start')],
            [InlineKeyboardButton("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞", callback_data='edit_time_end')],
            [InlineKeyboardButton("–ú–µ—Å—Ç–æ", callback_data='edit_place')],
            [InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data='edit_text')],
            [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç", callback_data='edit_contact')],
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data='edit_image')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
        ])
    )
    return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
async def handle_responsible_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith('responsible_'):
        try:
            telegram_id = int(data.split('_')[1])
        except ValueError:
            await query.edit_message_text(
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram_ID.",
                parse_mode='MarkdownV2'
            )
            return

        session: Session = SessionLocal()
        try:
            person = session.query(ResponsiblePerson).filter_by(telegram_id=telegram_id).first()
            if person:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É
                await context.bot.send_message(
                    chat_id=telegram_id,
                    text=f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –Ω–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{format_text(context.user_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))}"
                )
                await query.edit_message_text(
                    text=f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω: {person.name}",
                    parse_mode='MarkdownV2'
                )
            else:
                await query.edit_message_text(
                    text="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode='MarkdownV2'
                )
        except Exception as e:
            await query.edit_message_text(
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}",
                parse_mode='MarkdownV2'
            )
            session.rollback()
        finally:
            session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ CallbackQuery
async def handle_main_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'main_menu':
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await main_menu_handler(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=None)

def callbacks_handlers() -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è CallbackQuery.
    """
    return [
        CallbackQueryHandler(handle_post_action, pattern='^(save_draft|send_for_approval|edit_post)$'),
        CallbackQueryHandler(handle_responsible_selection, pattern='^responsible_\\d+$'),
        CallbackQueryHandler(handle_main_menu_selection, pattern='^main_menu$'),
    ]
