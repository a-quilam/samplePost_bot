# handlers/post_creation.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)
from utils.validators import validate_date, validate_time, validate_url
from utils.formatter import format_text
from models import Draft, ResponsiblePerson
from sqlalchemy.orm import Session
from config import REVIEW_CHAT_ID

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
POST_CREATION = range(9)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
POST_STEPS = [
    {
        'key': 'title',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': None,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'date',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': validate_date,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'time_start',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': validate_time,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'time_end',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:30) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': validate_time,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'place_name',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': None,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'place_url',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Maps URL) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': validate_url,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'text',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': None,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'contact',
        'prompt': "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': None,
        'formatter': format_text,
        'optional': True,
    },
    {
        'key': 'image',
        'prompt': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'validator': None,
        'formatter': None,
        'optional': True,
    },
]

def get_skip_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_post_actions_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìÑ –í —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data='save_draft')],
        [InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", callback_data='send_for_approval')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_post')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['current_step'] = 0
    await prompt_step(update, context)
    return POST_CREATION

async def prompt_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    step_index = context.user_data['current_step']
    if step_index < len(POST_STEPS):
        step = POST_STEPS[step_index]
        await update.message.reply_text(
            step['prompt'],
            reply_markup=get_skip_keyboard()
        )
    else:
        await review_post(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    step_index = context.user_data.get('current_step', 0)
    if step_index >= len(POST_STEPS):
        return POST_CREATION

    step = POST_STEPS[step_index]
    text = update.message.text

    if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and step['optional']:
        context.user_data[step['key']] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if step['key'] != 'image' else None
    else:
        if step['validator'] and not step['validator'](text):
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                reply_markup=get_skip_keyboard()
            )
            return POST_CREATION
        context.user_data[step['key']] = step['formatter'](text) if step['formatter'] else text

    context.user_data['current_step'] += 1
    await prompt_step(update, context)
    return POST_CREATION

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'skip':
        await handle_message(update, context)
        return POST_CREATION
    elif data in ['save_draft', 'send_for_approval', 'edit_post']:
        if data == 'save_draft':
            await save_draft(update, context)
        elif data == 'send_for_approval':
            await send_for_approval(update, context)
        elif data == 'edit_post':
            await edit_post(update, context)
        return ConversationHandler.END
    else:
        return POST_CREATION

async def review_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    post_data = context.user_data
    post = (
        f"üì¢ *{post_data.get('title')}*\n\n"
        f"üìÖ *–î–∞—Ç–∞*: {post_data.get('date')}\n"
        f"‚è∞ *–í—Ä–µ–º—è*: {post_data.get('time_start')} - {post_data.get('time_end')}\n"
        f"üìç *–ú–µ—Å—Ç–æ*: [{post_data.get('place_name')}]({post_data.get('place_url')})\n\n"
        f"{post_data.get('text')}\n\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç*: {post_data.get('contact')}"
    )
    
    if post_data.get('image'):
        await update.message.reply_photo(
            photo=post_data['image'],
            caption=post,
            parse_mode='MarkdownV2',
            reply_markup=get_post_actions_keyboard()
        )
    else:
        await update.message.reply_text(
            post,
            parse_mode='MarkdownV2',
            reply_markup=get_post_actions_keyboard()
        )
    
    return POST_CREATION

async def save_draft(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    session: Session = context.bot_data['db_session']
    
    draft = Draft(
        user_id=update.effective_user.id,
        title=context.user_data.get('title'),
        date=context.user_data.get('date'),
        time_start=context.user_data.get('time_start'),
        time_end=context.user_data.get('time_end'),
        place_name=context.user_data.get('place_name'),
        place_url=context.user_data.get('place_url'),
        text=context.user_data.get('text'),
        contact=context.user_data.get('contact'),
        image=context.user_data.get('image')
    )
    session.add(draft)
    session.commit()
    
    await query.edit_message_caption(
        caption="–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.",
        parse_mode='MarkdownV2',
        reply_markup=None
    )
    await query.message.reply_text(
        "–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.",
        reply_markup=ReplyKeyboardMarkup([['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END

async def send_for_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    session: Session = context.bot_data['db_session']
    
    post_data = context.user_data
    post = (
        f"üì¢ *{post_data.get('title')}*\n\n"
        f"üìÖ *–î–∞—Ç–∞*: {post_data.get('date')}\n"
        f"‚è∞ *–í—Ä–µ–º—è*: {post_data.get('time_start')} - {post_data.get('time_end')}\n"
        f"üìç *–ú–µ—Å—Ç–æ*: [{post_data.get('place_name')}]({post_data.get('place_url')})\n\n"
        f"{post_data.get('text')}\n\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç*: {post_data.get('contact')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    if post_data.get('image'):
        sent_message = await context.bot.send_photo(
            chat_id=REVIEW_CHAT_ID,
            photo=post_data['image'],
            caption=post,
            parse_mode='MarkdownV2'
        )
    else:
        sent_message = await context.bot.send_message(
            chat_id=REVIEW_CHAT_ID,
            text=post,
            parse_mode='MarkdownV2'
        )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
    responsible_persons = session.query(ResponsiblePerson).all()
    if responsible_persons:
        keyboard = [
            [InlineKeyboardButton(person.name, callback_data=f'responsible_{person.telegram_id}')]
            for person in responsible_persons
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=REVIEW_CHAT_ID,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç:",
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=REVIEW_CHAT_ID,
            text="–ù–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
        )
    
    await query.edit_message_caption(
        caption="–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.",
        parse_mode='MarkdownV2',
        reply_markup=None
    )
    await query.message.reply_text(
        "–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.",
        reply_markup=ReplyKeyboardMarkup([['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data='edit_title')],
        [InlineKeyboardButton("–î–∞—Ç–∞", callback_data='edit_date')],
        [InlineKeyboardButton("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", callback_data='edit_time_start')],
        [InlineKeyboardButton("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞", callback_data='edit_time_end')],
        [InlineKeyboardButton("–ú–µ—Å—Ç–æ", callback_data='edit_place')],
        [InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data='edit_text')],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç", callback_data='edit_contact')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data='edit_image')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_caption(
        caption="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )
    return POST_CREATION

async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data
    
    if action.startswith('edit_'):
        field = action.split('_')[1]
        context.user_data['edit_field'] = field
        prompts = {
            'title': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'date': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'time_start': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'time_end': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:30) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'place': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'text': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'contact': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            'image': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        }
        prompt = prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        await query.edit_message_caption(
            caption=prompt,
            parse_mode='MarkdownV2',
            reply_markup=get_skip_keyboard()
        )
        return POST_CREATION
    elif action == 'cancel_edit':
        await query.edit_message_caption(
            caption="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode='MarkdownV2',
            reply_markup=get_post_actions_keyboard()
        )
        return POST_CREATION
    else:
        await query.edit_message_caption(
            caption="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            parse_mode='MarkdownV2',
            reply_markup=get_post_actions_keyboard()
        )
        return POST_CREATION

async def process_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    field = context.user_data.get('edit_field')
    text = update.message.text

    if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if field == 'image':
            context.user_data['image'] = None
            await update.message.reply_text("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_post_actions_keyboard())
        else:
            context.user_data[field] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            await update.message.reply_text("–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_post_actions_keyboard())
        return POST_CREATION

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    validators = {
        'date': validate_date,
        'time_start': validate_time,
        'time_end': validate_time,
        'place_url': validate_url
    }

    if field in validators and not validators[field](text):
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=get_skip_keyboard()
        )
        return POST_CREATION

    if field == 'image':
        if update.message.photo:
            context.user_data['image'] = update.message.photo[-1].file_id
            await update.message.reply_text("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_post_actions_keyboard())
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=get_skip_keyboard())
            return POST_CREATION
    else:
        formatter = {
            'title': format_text,
            'date': format_text,
            'time_start': format_text,
            'time_end': format_text,
            'place': format_text,
            'text': format_text,
            'contact': format_text,
            'place_url': format_text
        }.get(field, lambda x: x)
        context.user_data[field] = formatter(text)
        await update.message.reply_text("–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_post_actions_keyboard())
    
    return POST_CREATION

def post_creation_handlers() -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.
    """
    return [
        ConversationHandler(
            entry_points=[CommandHandler('create_post', start_post_creation)],
            states={
                POST_CREATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                    CallbackQueryHandler(handle_callback_query, pattern='^(skip|save_draft|send_for_approval|edit_post)$'),
                    CallbackQueryHandler(handle_edit, pattern='^edit_.*$'),
                    MessageHandler(filters.PHOTO, process_edit),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è 'image'
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_edit),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                ],
            },
            fallbacks=[CommandHandler('cancel', cancel_creation)],
            allow_reentry=True,
        )
    ]

async def cancel_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
